\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[english]{babel}
\usepackage{graphicx}
\usepackage{physics}
\usepackage{calrsfs}
\usepackage{mathalpha}
\usepackage{amssymb}
\usepackage{amsfonts}
\usepackage{amsmath}
\usepackage{fixltx2e}
\usepackage[dvipsnames]{xcolor}

\definecolor{myDarkGreen}{RGB}{0, 128, 0}


\title{2021-03-04 theory}
\author{}
\date{March 2021}

\begin{document}

\setcounter{section}{1}
\setcounter{subsection}{4}

\maketitle

\subsubsection{The operation $\boxtimes$}
For a given $a, b \in {0,1}^5$ the operation $\boxtimes$ is the multiplication in base 2 disregarding bits of positions > $n$ (in the example below $n = 5$, just for teaching purposes). For example, if a = [01010] and b = [10011] then we can compute a $\boxtimes$ b by hand as:

\begin{center}
\includegraphics[]{boxtimes.png}
\end{center}

Actually, if a,b are regarded as integers in base 2 , i.e. a = 10,b = 19, then the performed operation is: a $\boxtimes$ b = (a $\cdot$ b)($mod 2^n$). In the current example:

\begin{center}
    $10 \boxtimes 19 = 30$
\end{center}

because $10 \cdot 19 = 190 = 30 (mod 32)$ (in python (10*19)\%32 gives 30).

\subsubsection{A baby example of asymmetric cipher}
Bob's pair (\textcolor{red}{sk}, pk): the public key is pk = 19 and the secret key \textcolor{red}{sk} is the x such that $19 \boxtimes x = 1$. Here is how Alice use Bob's public key to encipher $P \in {0,1}^5$:

\begin{center}
\includegraphics[]{alice_bob_1.4.2.png}
\end{center}

\textit{Is it possible to find Bob's secret key \textcolor{red}{sk} in the case above?}\\
There are two possible solutions to this exercise:
\begin{itemize}
    \item By means of a brute force loop on python
    \item Using the Kuttaka algorithm
\end{itemize}

\textbf{\underline{The Kuttaka algorithm}}\\
Hypotesis: the pair (sk, pk) is calculated by: pk $\boxtimes$ sk = 1, so that the sk is the inverse of the pk.\\
The Kuttaka algorithm allow to find the secret key (sk) with calculations made by hand, starting from a public key (pk), by computing the inverse of numbers.\\
Example of Kuttaka algorithm implementation:\\
Bob's pk is [10011] = 19. The used strategy is:

\begin{center}
    $19 \cdot \equiv 1 (mod 32)  \leftrightarrow 19 \boxtimes x \equiv 1 (mod 32)$
\end{center}

Then, multiple divisions are needed, starting from $2^n / $pk, \textcolor{blue}{until a remainder with value $0$ is reached}:

\begin{center}
\includegraphics[]{kuttaka_mine.png}
\end{center}

The previous table is created with these rules:
\begin{enumerate}
    \item The first column has M = X + 1 cells, where X is the number of division performed;
    \item The first values of the first column are copied from the results of the divisions;
    \item The last values is always 1;
    \item The \textcolor{orange}{second-to-last value of the first column} is computed as follows:
    \begin{itemize}
        \item if M is even, then the value is computed by subtracting 1 to the \textcolor{myDarkGreen}{result of the last division}
        \item if M is odd, then the value is computed by adding 1 to the \textcolor{myDarkGreen}{result of the last division}
    \end{itemize}
    
    \item \textcolor{violet}{The second-to-last value of each other column is computed as the sum of the second-to-last values of previous columns}. In the example: $16 = 11 \cdot 5$.
    \item Other numbers are just copied to the next column
    \item The final result is contained in the top-right corner of the table
\end{enumerate}

In order to verify the final result it is possible to use python:
\begin{center}
    $19^-1 \equiv 27 (mod 32)$
\end{center}

Another example of Kuttaka algorithm: $\frac{3}{5}$  in           $\mathbb{Z}\textsubscript{\textit{7}}$:

\begin{center}
\includegraphics[]{kuttaka2.png}
\end{center}



\subsection{A baby Galois $\otimes$-cipher}
Following Evariste Galois we introduce a new multiplication $\otimes$ between strings $a,b \in {0,1}^5$:

\begin{center}
    $a \otimes b = c$
\end{center}

Be careful to \underline{not} confuse $\otimes$ with a XOR ($\oplus$).\\

Let's take a Galois modular function G(x) and two polynomials a(x) and b(x), coming from $a=[a_4 a_3 a_2 a_1 a_0]$ and $b=[b_4 b_3 b_2 b_1 b_0]$, respectively:

\begin{center}
    $a(x) = a_4 x^4 + a_3 x^3 + a_2 x^2 + a_1 x + a_0$ \\
    $b(x) = b_4 x^4 + b_3 x^3 + b_2 x^2 + b_1 x + b_0$
\end{center}

The Galois multiplication consist in compute $(a(x) \times b(x)) mod G(x)$, with a remainder $c(x)$.\\
As an explicit example let us compute [01010] $\otimes$ [10011]. First of all we compute 

\begin{center}
\includegraphics[]{galois01.png}
\end{center}

\begin{center}
\includegraphics[]{galois02.png}\\
\end{center}

In the end, the result is: [01111] $(mod G(x))$.

\begin{center}
\includegraphics[]{galois03.png}
\end{center}

\subsection{Symmetric Cryptography}
\subsubsection{IND Indistinguishability experiment}
Ciphertext indistinguishability is a property of many encryption schemes. Intuitively, if a cryptosystem possesses the property of indistinguishability, then an adversary will be unable to distinguish pairs of ciphertexts based on the message they encrypt. The property of indistinguishability under chosen plaintext attack is considered a basic requirement for most provably secure public key cryptosystems, though some schemes also provide indistinguishability under chosen ciphertext attack and adaptive chosen ciphertext attack.\\
IND is a theoretical experiment used to evaluate indistinguishability of a cryptosystem.
In this experiment there is a cryptoanalyst (adversary) that sends us two different plaintexts. We, acting as a cryptographer, have to randomly choose one of the two using a \textit{coin mechanism} (like heads and tails game) and encrypt it. If the cryptoanalyst will be unable to distinguish our random choice (head or tail), then the cryptosystem described by this specific experiment is considered secure regarding the indistinguishability.\\
The experiment is repeated several times and a probability of the chance to distinguish the random choice is calculated (probability $p \in [0,1]$).

\begin{center}
\includegraphics[]{IND.png}
\end{center}

The symmetric cryptosystem $\Pi$ = (Gen, Enc, Dec) is defined as \textbf{IND-secure} if and only if no adversary $\mathcal{A}$ can distinguish with probability better than 1/2.

\subsection{CPA-IND experiment}
Another type of experiment applicable to symmetric cryptosystems is the CPA-IND (Chosen Plaintext Attack INDistinguishability).

This experiment is similar to the previous one and it is made up different steps:
\begin{enumerate}
    \item A $n$-bit key k is generated by running Gen function
    \item The adversary (cryptoanalyst), connected to the server (cryptographer) having access to $Enc_k(\cdot)$, chooses two plaintexts $P_0$ and $P_1$ of the same length
    \item A random bit $b = {0,1}$ is chosen and then a ciphertext C is computed and sent to the adversary.
    \item Adversary, who has access to $Enc_k(\cdot)$, generates $b'$
    \item If $b' = b$ then adversary has succeded to distinguish, otherwise not.
\end{enumerate}

The symmetric cryptosystem $\Pi$ = (Gen, Enc, Dec) is defined as \textbf{CPA-IND-secure} (or just CPA-secure) if and only if no adversary $\mathcal{A}$ can distinguish with probability better than 1/2.

\textit{Which are the differences from previous case?}\\
Inside the server there is an $Enc_k(\cdot)$ program running that encrypt according to the symmetric key k and encryption is \underline{not} deterministic! 
Before we had that, given a plaintext P, the correspondant ciphertext is always the same. Instead, in this case result could be C now, but then, if we re-use the same encryption function on the same plaintext, it could generate C', C'', etc. different from C. This property is due to the fact that encryption is based also on a random sequence of bits:
\begin{center}
    C = $Enc_k(random_b_i_t_s || P_b)$\\
    C' = $Enc_k(random_b_i_t_s' || P_b)$\\
    C'' = $Enc_k(random_b_i_t_s'' || P_b)$\\
    ...and so on...
\end{center}

Note: A \underline{good} client will knows the length of the random sequence and will throw away the right number of bits in order to keep only the enciphered plaintext. So, for a good client, doesn't matter if it receives C, C', C'' or others.


\end{document}
